x <- matrix(1:9, 3, 3)
x
solve(x)
y <- matrix(1:4, 2, 2)
solve(x)
solve(y)
?solve
?inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setinv(m)
m
}
cacheSolve(x)
cacheSolve()
cacheSolve(m)
x
y
makeCacheMatrix(y)
cacheSolve(y)
y
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) m <<- inverse
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix(y)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(y)
cacheSolve(y)
B <- matrix(c(1,2,3,4),2,2)
b
B
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B1)
y <- matrix(1:4, 2, 2)
y1 <- makeCacheMatrix(y)
cacheSolve(y1)
